@model KumoHomePage
@{
  Layout = null;

  var lang = "cs";
  if (Context.Request.Cookies[".AspNetCore.Culture"] != null && Context.Request.Cookies[".AspNetCore.Culture"].Contains("de"))
  {
    lang = "de";
  }
  else if (Context.Request.Query["lang"] == "de")
  {
    lang = "de";
  }
  else if (Context.Request.Headers["Accept-Language"].ToString().StartsWith("de"))
  {
    lang = "de";
  }

  string GetText(LocalizedText text) => lang == "de" ? text.De : text.Cs;
}

<!DOCTYPE html>
<html lang="cs">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/assets/css/styles.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r126/three.min.js"></script>
  <script src="https://unpkg.com/three@0.126.0/examples/js/loaders/GLTFLoader.js"></script>
  <script src="https://unpkg.com/meshoptimizer@0.18.1/meshopt_decoder.js"></script>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@500;700;800&display=swap" rel="stylesheet">
  <title>KUMO</title>
</head>
<body class="scene-default">

  <!-- HEADER -->
  <header class="scene-default">
    <div class="header-left">
      <button id="back-button" class="back-button hidden">
        <span class="circle">
          <span class="arrow-left"></span>
        </span>
        <span class="text">@GetText(Model.BackButtonText)</span>
      </button>
    </div>
    <div class="header-center">
      <div class="logo">
        <img id="site-logo" src="/uploads/img/GroupLogoBlack.png" alt="KUMO Logo">
      </div>
    </div>
    <div class="header-right">
      <button id="menu-button" class="menu-button default">
        MENU
        <span class="icon">
          <div class="bar"></div>
          <div class="bar"></div>
          <div class="bar"></div>
        </span>
      </button>
      <button id="close-menu" class="close-button hidden">
        <span class="text">@GetText(Model.MenuCloseText)</span>
        <span class="icon-x">&times;</span>
      </button>
    </div>
  </header>

  <!-- MENU OVERLAY -->
  <div id="menu-overlay" class="menu-overlay hidden">
    <!-- Horní řádek: přepínače, logo, close -->
    <div class="menu-header">
      <div class="header-left">
        <div class="language-switch">
          <button onclick="setLanguage('cs')">ČEŠTINA</button>
          <button onclick="setLanguage('de')">DEUTSCH</button>
        </div>
      </div>
      <div class="header-center">
        <div class="menu-logo">
          <img src="/uploads/img/GroupLogoBlack.png" alt="Logo" />
        </div>
      </div>
      <div class="header-right">
<button class="menu-close-button" onclick="toggleMenuButtons(false)">
  <span class="text">CLOSE</span>
  <span class="icon-x">&times;</span>
</button>

      </div>
    </div>


    <!-- Menu odkazy vlevo -->
    <div class="menu-links">
      <div class="menu-link" data-part="about" data-title="@GetText(Model.MenuAbout)">@GetText(Model.MenuAbout)</div>
      <div class="menu-link" data-part="services" data-title="@GetText(Model.MenuServices)">@GetText(Model.MenuServices)</div>
      <div class="menu-link" data-part="contact" data-title="@GetText(Model.MenuContact)">@GetText(Model.MenuContact)</div>
      <div class="menu-link" data-part="investors" data-title="@GetText(Model.MenuInvestors)">@GetText(Model.MenuInvestors)</div>
    </div>

    <!-- Spodní patička -->
        <footer class="menu-footer">
      <div class="footer-line"></div>
      <div class="footer-content">
        <div class="footer-block">
          <div class="footer-title">@GetText(Model.FooterCompanyName)</div>
        </div>
        <div class="footer-block">
          <div>@GetText(Model.FooterAddress)</div>
        </div>
        <div class="footer-block">
          <div>@GetText(Model.FooterIdentification)</div>
        </div>
        <div class="footer-divider"></div>
        <div class="footer-block">
          <div>@GetText(Model.FooterEmail)</div>
          <div>@GetText(Model.FooterPhone)</div>
        </div>
      </div>
    </footer>
  </div>

  <h1 class="homepage-title" id="background-text">KUMO</h1>
  <div id="car-container"></div>

  <!-- CLICKABLE POINTS -->
  <div class="clickable-point door-point" id="door-point" data-title-text="@GetText(Model.MenuAbout)">
    <div class="icon">📦</div>
    <div class="label">@GetText(Model.MenuAbout)</div>
  </div>
  <div class="clickable-point trunk-point" id="trunk-point" data-title-text="@GetText(Model.MenuServices)" data-position="left">
    <div class="icon">🔧</div>
    <div class="label">@GetText(Model.MenuServices)</div>
  </div>
  <div class="clickable-point hood-point" id="hood-point" data-title-text="@GetText(Model.MenuContact)" data-position="bottom">
    <div class="icon">📞</div>
    <div class="label">@GetText(Model.MenuContact)</div>
  <div class="label">Contacts</div>
  </div>

  <!-- INFO BOX -->
  <div id="info-box" class="hidden">
    <h2 id="info-title"></h2>
    <div id="info-layout-door" class="info-layout hidden">
      <div class="info-title-left" id="info-title-left">@GetText(Model.MenuServices)</div>
      <div class="info-main-text" id="info-main-text"></div>
      <div class="info-stat">
        <div class="info-stat-main">@GetText(Model.ExperienceValue)</div>
        <div class="info-stat-sub">@GetText(Model.ExperienceLabel)</div>
      </div>
      <div class="info-stat">
        <div class="info-stat-main">@GetText(Model.ShipmentsValue)</div>
        <div class="info-stat-sub">@GetText(Model.ShipmentsLabel)</div>
      </div>
    </div>
    <div id="info-layout-trunk" class="info-layout hidden">
      <div class="trunk-left">
        <img src="/uploads/img/ups_logo.png" alt="UPS Logo" class="trunk-logo" />
        <div class="trunk-subtitle">@GetText(Model.FooterText)</div>
      </div>
      <div class="trunk-right">
        <div class="trunk-title" id="trunk-title"></div>
        <div class="trunk-main-text" id="info-text-trunk"></div>
      </div>
    </div>
    <div id="info-layout-hood" class="info-layout hidden">
      <div class="info-contact-details">
        <div class="contact-box">@GetText(Model.ContactEmail)</div>
        <div class="contact-box">@GetText(Model.ContactPhone)</div>
      </div>
      <div class="info-contacts">
        <div class="contact">
          <img src="/uploads/img/kubin.jpg" alt="Kontakt 1">
          <div class="contact-info">
            <div class="contact-name">@GetText(Model.Contact1Name)</div>
            <div class="contact-role">@GetText(Model.Contact1Role)</div>
          </div>
        </div>
        <div class="contact">
          <img src="/uploads/img/motl.jpg" alt="Kontakt 2">
          <div class="contact-info">
            <div class="contact-name">@GetText(Model.Contact2Name)</div>
            <div class="contact-role">@GetText(Model.Contact2Role)</div>
          </div>
        </div>
      </div>
    </div>
  </div>


  <div id="investor-button-wrapper" class="investor-button-wrapper">
    <button id="investor-button" class="investor-button">
      <img src="/uploads/img/ups_logo.png" alt="icon">
      @GetText(Model.InvestorsButtonText)
    </button>
  </div>



  <!-- PAGE FOOTER -->
  <footer class="scene-default" id="page-footer">
    <div class="footer-center">
      <span class="footer-text">@GetText(Model.FooterText)</span>
      <img id="footer-logo" src="/uploads/img/ups_logo.png" alt="UPS Logo">
    </div>
  </footer>


  <script>
    const currentLang = "@lang"; // vloží Razor string do JS

    function setLanguage(lang) {
      localStorage.setItem("kumoLang", lang);
      location.reload();
    }

    const kumoTexts = {
      door: @Html.Raw(Json.Serialize(lang == "de" ? Model.DoorText?.De?.Value : Model.DoorText?.Cs?.Value)),
      trunk: @Html.Raw(Json.Serialize(lang == "de" ? Model.TrunkText?.De?.Value : Model.TrunkText?.Cs?.Value)),
      hood: @Html.Raw(Json.Serialize(lang == "de" ? Model.HoodText?.De?.Value : Model.HoodText?.Cs?.Value)),
      investors: "@(lang == "de" ? "Für Investoren" : "Pro investory")"
    };

      function setLanguage(lang) {
      const culture = lang === "de" ? "de-DE" : "cs-CZ";

      document.cookie = `.AspNetCore.Culture=c=${culture}|uic=${culture}; path=/; max-age=31536000`;

      // Reload stránky, aby Razor znovu načetl správný jazyk
      location.reload();
    }
  </script>


  <script>
    // === Globální proměnné ===
    let scene, camera, renderer, model, mixer, trunkAnimation;
    let isFocused = false;
    let isTrunkOpen = false;
    const clock = new THREE.Clock();
    const defaultRotation = Math.PI / 0.55;
    const ROTATIONS = {
      default: defaultRotation,
      door: (3 * Math.PI) / 2,
      trunk: Math.PI,
      hood: 0
    };

    // === Inicializace scény ===
    function init() {
      scene = new THREE.Scene();
      
      camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 1000);

      // 📏 Detekce zařízení podle šířky viewportu
      const isMobile = window.innerWidth < 768;

      // 💡 Kompromisní pozice kamery a zoom
      camera.position.set(0, isMobile ? 1.6 : 1.65, isMobile ? 6.5 : 5.6);
      camera.lookAt(0, 0.6, 0);
   
      renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
      renderer.setSize(window.innerWidth, window.innerHeight);
      renderer.shadowMap.enabled = true;
      renderer.toneMapping = THREE.ReinhardToneMapping;
      renderer.toneMappingExposure = 0.9;
      
      document.getElementById("car-container").appendChild(renderer.domElement);

      // === NASVÍCENÍ ===
      const light = new THREE.DirectionalLight(0xffffff, 2);
      light.position.set(5, 5, 5);
      light.castShadow = true;
      light.shadow.mapSize.set(1024, 1024);
      light.shadow.bias = -0.0001;
      scene.add(light);

      scene.add(new THREE.AmbientLight(0xffffff, 5));

      const backLight = new THREE.DirectionalLight(0xffffff, 0.8);
      backLight.position.set(-5, 3, -3);
      scene.add(backLight);

      // === STÍNOVÁ ROVINA ===
      const plane = new THREE.Mesh(
        new THREE.PlaneGeometry(10, 10),
        new THREE.ShadowMaterial({ opacity: 0.3 })
      );
      plane.rotation.x = -Math.PI / 2;
      plane.position.y = -0.1;
      plane.receiveShadow = true;
      scene.add(plane);

      // === NAČTENÍ MODELU ===
          const loader = new THREE.GLTFLoader();

              // Aktivace Meshopt dekodéru
    if ('MeshoptDecoder' in window) {
      loader.setMeshoptDecoder(MeshoptDecoder);
    }

    const modelPath = isMobile ? "/assets/glb/van_mobile.glb" : "/assets/glb/van.glb";

    loader.load(modelPath, function (gltf) {
      model = gltf.scene;
      model.position.y = 0;
      model.rotation.y = Math.PI / 0.55;

      const scale = isMobile ? 0.5 : 0.78;
      model.scale.set(scale, scale, scale);

      model.traverse((node) => {
        if (node.isMesh) {
          node.castShadow = true;
          if (node.material && node.material.metalness !== undefined) {
            node.material.roughness = 0.2;
            node.material.metalness = 0.2;
            node.material.needsUpdate = true;
          }
        }
      });

      scene.add(model);

      if (gltf.animations.length > 0) {
        mixer = new THREE.AnimationMixer(model);
        const fullClip = gltf.animations[0];
        const duration = fullClip.duration;
        const start = duration - 3;
        const end = duration;
        const truncatedClip = THREE.AnimationUtils.subclip(fullClip, "openTrunkTrimmed", start * 30, end * 30);
        trunkAnimation = mixer.clipAction(truncatedClip);
        trunkAnimation.clampWhenFinished = true;
        trunkAnimation.loop = THREE.LoopOnce;
      }

      animate();
    });


      window.addEventListener("resize", onWindowResize);
    }



    function animate() {
      requestAnimationFrame(animate);
      const delta = clock.getDelta();
      if (mixer) mixer.update(delta);
      renderer.render(scene, camera);
    }

    function normalizeAngle(angle) {
      return ((angle % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);
    }

    function moveToPart(targetRotation, titleText, position, clickedPart) {
      if (!model) return;

      const trunkRight = document.querySelector("#info-layout-trunk .trunk-right");

      const startRotation = model.rotation.y;
      const duration = 500;
      const startTime = performance.now();

      const normalizedStart = normalizeAngle(startRotation);
      const normalizedTarget = normalizeAngle(targetRotation);
      let delta = normalizedTarget - normalizedStart;
      if (delta > Math.PI) delta -= 2 * Math.PI;
      if (delta < -Math.PI) delta += 2 * Math.PI;

      function animateRotation(currentTime) {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);
        model.rotation.y = startRotation + delta * progress;

        if (progress < 1) {
          requestAnimationFrame(animateRotation);
        } else {
          finishFocusTransition();
        }
      }

      function finishFocusTransition() {
        document.getElementById("info-box").style.visibility = "visible";
        isFocused = true;
        updateUI(titleText, position, clickedPart);
        document.getElementById("background-text").textContent = titleText;
        document.getElementById("back-button").classList.remove("hidden");

        if (clickedPart === "trunk" && trunkAnimation) {
          trunkAnimation.reset();
          trunkAnimation.play();
          isTrunkOpen = true;

          setTimeout(() => {
            if (trunkRight) trunkRight.classList.add("visible");
          }, 500);
        }
      }

      requestAnimationFrame(animateRotation);
    }

    function updateUI(text = "", position = "", clickedPart = "") {
      const body = document.body;
      const header = document.querySelector("header");
      const footer = document.querySelector("footer");
      const backgroundText = document.getElementById("background-text");
      const infoBox = document.getElementById("info-box");
      const infoTitle = document.getElementById("info-title");
      const clickablePoints = document.querySelectorAll(".clickable-point");
      const menuButton = document.getElementById("menu-button");

      const investorButtonWrapper = document.getElementById("investor-button-wrapper");
      if (investorButtonWrapper) {
        investorButtonWrapper.style.display = isFocused ? "none" : "block";
      }

      document.querySelectorAll(".info-layout").forEach(layout => layout.classList.add("hidden"));

      const trunkRight = document.querySelector("#info-layout-trunk .trunk-right");
      if (trunkRight) trunkRight.classList.remove("visible");

      infoBox.classList.remove("info-left", "info-right", "info-bottom", "info-top");

      document.getElementById("page-footer").style.display = isFocused ? "none" : "block";

      if (position) {
        infoBox.classList.add(`info-${position}`);
      }

       if (isFocused) {
        body.classList.replace("scene-default", "scene-focused");
        header.classList.replace("scene-default", "scene-focused");
        footer.classList.replace("scene-default", "scene-focused");

        backgroundText.style.display = "none";
        clickablePoints.forEach(p => (p.style.display = "none"));
        infoBox.classList.remove("hidden");

        document.getElementById("site-logo").src = "/uploads/img/GroupLogoWhite.png";

        menuButton.classList.remove("default");
        menuButton.classList.add("focused");

        if (clickedPart === "hood") {
          infoTitle.style.display = "none";
        } else {
          infoTitle.style.display = "block";
          infoTitle.textContent = text;
        }

        if (clickedPart === "door") {
          document.getElementById("info-layout-door").classList.remove("hidden");
          document.getElementById("info-main-text").textContent = kumoTexts.door;
          document.getElementById("info-title-left").textContent = text;
          infoTitle.style.display = "none";
        } else if (clickedPart === "trunk") {
          document.getElementById("info-layout-trunk").classList.remove("hidden");
          document.getElementById("info-text-trunk").textContent = kumoTexts.trunk;
          document.getElementById("trunk-title").textContent = text;
          infoTitle.style.display = "none";
        } else if (clickedPart === "hood") {
          document.getElementById("info-layout-hood").classList.remove("hidden");
        }

      } else {
        body.classList.replace("scene-focused", "scene-default");
        header.classList.replace("scene-focused", "scene-default");
        footer.classList.replace("scene-focused", "scene-default");

        backgroundText.style.display = "block";
        backgroundText.textContent = "KUMO";
        clickablePoints.forEach(p => (p.style.display = "block"));
        infoBox.classList.add("hidden");

        document.getElementById("site-logo").src = "/uploads/img/GroupLogoBlack.png";

        menuButton.classList.remove("focused");
        menuButton.classList.add("default");
      }
    }

    function resetView() {
      if (!model) return;

      const startRotation = model.rotation.y;
      const target = defaultRotation;
      const duration = 500;
      const startTime = performance.now();

      function animateRotation(currentTime) {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / duration, 1);
        model.rotation.y = startRotation + (target - startRotation) * progress;

        if (progress < 1) {
          requestAnimationFrame(animateRotation);
        } else {
          isFocused = false;
          updateUI();
          document.getElementById("background-text").textContent = "KUMO";
          document.getElementById("back-button").classList.add("hidden");
        }
      }

      if (trunkAnimation && isTrunkOpen) {
        const trunkRight = document.querySelector("#info-layout-trunk .trunk-right");
        if (trunkRight) trunkRight.classList.remove("visible");

        trunkAnimation.stop();
        trunkAnimation.timeScale = 1;
        trunkAnimation.reset();
        isTrunkOpen = false;
      }

      requestAnimationFrame(animateRotation);
    }

    function toggleMenuButtons(show) {
      const overlay = document.getElementById("menu-overlay");
      const menuBtn = document.getElementById("menu-button");
      const closeBtn = document.getElementById("close-menu");

      overlay.classList.toggle("hidden", !show);
      menuBtn.classList.toggle("hidden", show);
      closeBtn.classList.toggle("hidden", !show);
    }

    // === Jednotný přechod pro menu i body ===
    function transitionToPart(rotation, title, position, part) {
      document.getElementById("info-box").style.visibility = "hidden";
      document.querySelectorAll(".info-layout").forEach(layout => layout.classList.add("hidden"));

      const trunkRight = document.querySelector("#info-layout-trunk .trunk-right");
      if (trunkRight) trunkRight.classList.remove("visible");

      if (trunkAnimation && isTrunkOpen) {
        trunkAnimation.stop();
        trunkAnimation.timeScale = 1;
        trunkAnimation.reset();
        isTrunkOpen = false;
      }

      toggleMenuButtons(false);
      moveToPart(rotation, title, position, part);
    }

    // === Inicializace celé aplikace ===
    window.onload = () => {
      init();
      startPulsingPoints();

      document.getElementById("door-point").addEventListener("click", e => {
        transitionToPart(ROTATIONS.door, e.currentTarget.dataset.titleText, "bottom", "door");
      });

      document.getElementById("trunk-point").addEventListener("click", e => {
        transitionToPart(ROTATIONS.trunk, e.currentTarget.dataset.titleText, "left", "trunk");
      });

      document.getElementById("hood-point").addEventListener("click", e => {
        transitionToPart(ROTATIONS.hood, e.currentTarget.dataset.titleText, "left", "hood");
      });

      document.querySelectorAll(".menu-link").forEach(link => {
        link.addEventListener("click", () => {
          let rot = 0, title = link.dataset.title, position = "", part = "";

          switch (link.dataset.part) {
            case "about":
              rot = ROTATIONS.door;
              title = "ABOUT US";
              position = "bottom";
              part = "door";
              break;
            case "services":
              rot = ROTATIONS.trunk;
              title = "SERVICES";
              position = "left";
              part = "trunk";
              break;
            case "contact":
              rot = ROTATIONS.hood;
              title = "CONTACT";
              position = "left";
              part = "hood";
              break;
            case "investors":
              rot = ROTATIONS.default;
              title = "PRO INVESTORY";
              position = "right";
              part = "investors";
              break;
          }

          transitionToPart(rot, title, position, part);
        });
      });

      document.getElementById("menu-button").addEventListener("click", () => toggleMenuButtons(true));
      document.getElementById("close-menu").addEventListener("click", () => toggleMenuButtons(false));
      document.getElementById("back-button").addEventListener("click", resetView);
    };

    function createPulseEffect(pointElement) {
      const circle = document.createElement("div");
      circle.classList.add("pulse-circle");
      pointElement.appendChild(circle);
      setTimeout(() => pointElement.removeChild(circle), 1500);
    }

    function startPulsingPoints() {
      const points = document.querySelectorAll(".clickable-point");
      setInterval(() => {
        const randomPoint = points[Math.floor(Math.random() * points.length)];
        createPulseEffect(randomPoint);
      }, 2000);
    }

    function onWindowResize() {
      const isMobile = window.innerWidth < 768;

      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);

      // Kompromisní kamera
      camera.position.set(0, isMobile ? 1.3 : 1.65, isMobile ? 6 : 5.6);
      camera.lookAt(0, 0.6, 0);

      // Úměrný scale
      if (model) {
        const scale = isMobile ? 0.6 : 0.78;
        model.scale.set(scale, scale, scale);
      }
    }




  </script>

</body>
</html>